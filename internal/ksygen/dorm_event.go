// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package ksygen

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
)

type DormEvent struct {
	Size int32
	NumEntries int32
	_io *kaitai.Stream
	_root *DormEvent
	_parent interface{}
	_f_entries bool
	entries []*DormEvent_Entry
}
func NewDormEvent() *DormEvent {
	return &DormEvent{
	}
}

func (this *DormEvent) Read(io *kaitai.Stream, parent interface{}, root *DormEvent) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Size = int32(tmp1)
	tmp2, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.NumEntries = int32(tmp2)
	return err
}
func (this *DormEvent) Entries() (v []*DormEvent_Entry, err error) {
	if (this._f_entries) {
		return this.entries, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64((((4 + 4) + (4 * this._root.NumEntries)) + (4 * this._root.NumEntries))), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this._root.NumEntries); i++ {
		_ = i
		tmp3 := NewDormEvent_Entry()
		err = tmp3.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.entries = append(this.entries, tmp3)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_entries = true
	this._f_entries = true
	return this.entries, nil
}
type DormEvent_StrWithLen struct {
	Len uint16
	Value string
	_io *kaitai.Stream
	_root *DormEvent
	_parent *DormEvent_EntryData
}
func NewDormEvent_StrWithLen() *DormEvent_StrWithLen {
	return &DormEvent_StrWithLen{
	}
}

func (this *DormEvent_StrWithLen) Read(io *kaitai.Stream, parent *DormEvent_EntryData, root *DormEvent) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Len = uint16(tmp4)
	tmp5, err := this._io.ReadBytes(int(this.Len))
	if err != nil {
		return err
	}
	tmp5 = tmp5
	this.Value = string(tmp5)
	return err
}
type DormEvent_EntryHeader struct {
	Hash int32
	Addr1 uint32
	Unk1 int8
	Unk2 float32
	Unk3 float32
	Addr2 uint32
	Addr3 uint32
	Unk4 int8
	Unk5 int8
	Addr4 uint32
	Addr5 uint32
	Addr6 uint32
	_io *kaitai.Stream
	_root *DormEvent
	_parent *DormEvent_Entry
}
func NewDormEvent_EntryHeader() *DormEvent_EntryHeader {
	return &DormEvent_EntryHeader{
	}
}

func (this *DormEvent_EntryHeader) Read(io *kaitai.Stream, parent *DormEvent_Entry, root *DormEvent) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Hash = int32(tmp6)
	tmp7, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Addr1 = uint32(tmp7)
	tmp8, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.Unk1 = tmp8
	tmp9, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Unk2 = float32(tmp9)
	tmp10, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Unk3 = float32(tmp10)
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Addr2 = uint32(tmp11)
	tmp12, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Addr3 = uint32(tmp12)
	tmp13, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.Unk4 = tmp13
	tmp14, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.Unk5 = tmp14
	tmp15, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Addr4 = uint32(tmp15)
	tmp16, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Addr5 = uint32(tmp16)
	tmp17, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Addr6 = uint32(tmp17)
	return err
}
type DormEvent_EntryData struct {
	EventType *DormEvent_StrWithLen
	Emotion *DormEvent_StrWithLen
	Unk1 *DormEvent_StrWithLen
	Unk2 *DormEvent_StrWithLen
	Unk3 *DormEvent_StrWithLen
	Unk4 *DormEvent_StrWithLen
	_io *kaitai.Stream
	_root *DormEvent
	_parent *DormEvent_Entry
}
func NewDormEvent_EntryData() *DormEvent_EntryData {
	return &DormEvent_EntryData{
	}
}

func (this *DormEvent_EntryData) Read(io *kaitai.Stream, parent *DormEvent_Entry, root *DormEvent) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp18 := NewDormEvent_StrWithLen()
	err = tmp18.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.EventType = tmp18
	tmp19 := NewDormEvent_StrWithLen()
	err = tmp19.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Emotion = tmp19
	tmp20 := NewDormEvent_StrWithLen()
	err = tmp20.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Unk1 = tmp20
	tmp21 := NewDormEvent_StrWithLen()
	err = tmp21.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Unk2 = tmp21
	tmp22 := NewDormEvent_StrWithLen()
	err = tmp22.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Unk3 = tmp22
	tmp23 := NewDormEvent_StrWithLen()
	err = tmp23.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Unk4 = tmp23
	return err
}
type DormEvent_Entry struct {
	Header *DormEvent_EntryHeader
	Data *DormEvent_EntryData
	_io *kaitai.Stream
	_root *DormEvent
	_parent *DormEvent
}
func NewDormEvent_Entry() *DormEvent_Entry {
	return &DormEvent_Entry{
	}
}

func (this *DormEvent_Entry) Read(io *kaitai.Stream, parent *DormEvent, root *DormEvent) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp24 := NewDormEvent_EntryHeader()
	err = tmp24.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp24
	tmp25 := NewDormEvent_EntryData()
	err = tmp25.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Data = tmp25
	return err
}
