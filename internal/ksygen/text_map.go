// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package ksygen

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
)

type TextMap struct {
	Size int32
	NumTextlist int32
	_io *kaitai.Stream
	_root *TextMap
	_parent interface{}
	_f_textlist bool
	textlist []*TextMap_Textentry
}
func NewTextMap() *TextMap {
	return &TextMap{
	}
}

func (this *TextMap) Read(io *kaitai.Stream, parent interface{}, root *TextMap) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Size = int32(tmp1)
	tmp2, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.NumTextlist = int32(tmp2)
	return err
}
func (this *TextMap) Textlist() (v []*TextMap_Textentry, err error) {
	if (this._f_textlist) {
		return this.textlist, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64((((4 + 4) + (5 * this._root.NumTextlist)) + (4 * this._root.NumTextlist))), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumTextlist); i++ {
		_ = i
		tmp3 := NewTextMap_Textentry()
		err = tmp3.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.textlist = append(this.textlist, tmp3)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_textlist = true
	this._f_textlist = true
	return this.textlist, nil
}
type TextMap_Textentry struct {
	Addr1 uint32
	Addr2 uint32
	Key uint8
	Hash uint32
	Length int16
	Text string
	_io *kaitai.Stream
	_root *TextMap
	_parent *TextMap
}
func NewTextMap_Textentry() *TextMap_Textentry {
	return &TextMap_Textentry{
	}
}

func (this *TextMap_Textentry) Read(io *kaitai.Stream, parent *TextMap, root *TextMap) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Addr1 = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Addr2 = uint32(tmp5)
	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Key = tmp6
	tmp7, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Hash = uint32(tmp7)
	tmp8, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Length = int16(tmp8)
	tmp9, err := this._io.ReadBytes(int(this.Length))
	if err != nil {
		return err
	}
	tmp9 = tmp9
	this.Text = string(tmp9)
	return err
}
